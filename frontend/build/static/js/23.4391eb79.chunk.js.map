{"version":3,"sources":["store/services/AuthService.js","store/actions/auth/auth.action.js","pages/VerifyEmail/VerifyEmail.module.scss","hoc/withAuthentication.js","pages/VerifyEmail/VerifyEmail.js","store/services/Api.js"],"names":["AuthService","login","email","password","params","API","post","signup","name","headers","verify","token","forgetPass","resetPass","updateProfile","JSON","parse","localStorage","getItem","changePassword","oldpassword","auth","console","log","userid","userId","getProfile","get","dispatch","loginFail","loginSuccess","a","message","type","actionTypes","idToken","success","error","authservice","then","res","data","resdata","setItem","stringify","response","forgetpassword","forgetpasswordFail","forgetpasswordSuccess","loading","resetpassword","resetpasswordFail","resetpasswordSuccess","verifyemail","verifyFail","verifySuccess","signupFail","signupSuccess","length","msg","getProfileFail","getProfileSuccess","profiledata","changepassword","newpassword","changePasswordFail","changePasswordSuccess","module","exports","authroute","nonauthroute","withAuthentication","Component","WithAuthentication","includes","window","location","pathname","split","this","props","history","push","ROUTES","React","compose","withRouter","VerifyEmail","state","isValid","match","verifywait","className","errormsg","successmsg","classes","verifydiv","to","connect","authReducer","actions","withAuth","axios","create","baseURL","process","responseType"],"mappings":"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","file":"static/js/23.4391eb79.chunk.js","sourcesContent":["import API from \"./Api\";\n\nclass AuthService {\n    login = (email, password) => {\n        let params = {\n            email:email,\n            password:password\n        }\n        return API.post(\"/login\",params)\n    }\n\n    signup = (name, email, password) => {\n        const headers = {\n            'Url': \"http://3.135.194.11:5000\"\n        }\n        let params = {\n            name: name,\n            email:email,\n            password:password\n        }\n        return API.post(\"/signup\",params,{headers: headers})\n    }\n\n    verify = (email,token) => {\n        \n        let params = {\n            email:email,\n            token:token\n        }\n        return API.post(\"/verifyemail\",params)\n    }\n\n    forgetPass = (email) => {\n        const headers = {\n            'Url': \"http://3.135.194.11:5000\"\n        }\n        let params = {\n            email:email\n        }\n\n        return API.post(\"/forgetpassword\",params,{headers: headers})\n    }\n\n    resetPass = (password,token) => {\n        const headers = {\n            'Url': \"http://3.135.194.11:5000\"\n        }\n        let params = {\n            password:password,\n            token:token\n        }\n        return API.post(\"/resetpassword\",params,{headers: headers})\n    }\n\n    updateProfile = (name) => {\n        let auth = JSON.parse(localStorage.getItem('authUser'));\n        const headers = {\n            'Authorization': auth.token\n        }\n        let params = {\n            name:name\n        }\n        return API.post(\"/updateprofile\",params,{headers: headers})\n    }\n\n    changePassword = (oldpassword,password) => {\n        let auth = JSON.parse(localStorage.getItem('authUser'));\n        console.log(\"Auth\", auth);\n        const headers = {\n            'Authorization': auth.token\n        }\n        let params = {\n            oldpassword:oldpassword,\n            password:password,\n            userid: auth.userId\n        }\n        return API.post(\"/changepassword\",params,{headers: headers})\n    }\n\n    getProfile = () => {\n        let auth = JSON.parse(localStorage.getItem('authUser'));\n        const headers = {\n            'Authorization': auth.token\n        }\n        return API.get(\"/profile\",{headers:headers});\n    }\n}\n\nexport default AuthService;","import * as actionTypes from './auth.actiontype';\nimport AuthService from '../../services/AuthService';\n\n\nexport const login = (email,password) => {\n    return async dispatch => {\n        function loginFail(message) {\n            dispatch({ \n                type: actionTypes.LOGIN_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n        function loginSuccess(token, userId, message) {\n            dispatch({ \n                type:actionTypes.LOGIN_SUCCESS,\n                idToken:token,\n                userId:userId,\n                message:message\n            })\n            return {success:true,message:message};\n        }\n        try {\n            dispatch({ \n                type: actionTypes.LOGIN_START \n            });\n            let authservice = new AuthService();\n            const data = await authservice.login(email,password).then((res)=>{\n                 console.log(\"Response\", res);\n                if(res.data.success){\n                    let resdata = {\n                        token:res.data.token,\n                        userid:res.data.userid\n                    }\n                    localStorage.setItem(\"authUser\",JSON.stringify(resdata));\n                    return loginSuccess(res.data.token,res.data.userid,res.data.message);\n                }else{\n                    return loginFail(res.data.message); \n                }\n            });\n            return data;\n        } catch (error) {\n            if(error.response){\n                \n                return loginFail(error.response.data.message);\n            }else{\n                return loginFail(\"Something went wrong!\");\n            }\n        }\n      }\n}\n\nexport const forgetpassword = (email) => {\n    return async dispatch => {\n        function forgetpasswordFail(message) {\n            dispatch({ \n                type: actionTypes.FORGET_FAIL,\n                message:message,\n                loading:false \n            });\n            return {success:false,error:message}\n        }\n        function forgetpasswordSuccess(message) {\n            dispatch({ \n                type: actionTypes.FORGET_SUCCESS,\n                message: message,\n                loading:false\n            })\n            return {success:true,message:message};\n        }\n        try {\n            dispatch({ \n                type: actionTypes.FORGET_START \n            });\n            let authservice = new AuthService();\n            const data = await authservice.forgetPass(email).then((res)=>{\n                return forgetpasswordSuccess(res.data.message);\n            });\n            return data;\n        } catch (error) {\n            if(error.response){\n                return forgetpasswordFail(error.response.data.message);\n            }else{\n                return forgetpasswordFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const resetpassword = (password,token) => {\n    return async dispatch => {\n        function resetpasswordFail(message) {\n            dispatch({ \n                type: actionTypes.RESET_FAIL,\n                message:message,\n                loading:false \n            });\n            return {success:false,error:message}\n        }\n        function resetpasswordSuccess(message) {\n            dispatch({ \n                type: actionTypes.RESET_SUCCESS,\n                message: message,\n                loading:false\n            })\n            return {success:true,message:message};\n        }\n        try {\n            dispatch({ \n                type: actionTypes.RESET_START \n            });\n            let authservice = new AuthService();\n            const data = await authservice.resetPass(password,token).then((res)=>{\n                return resetpasswordSuccess(res.data.message);\n            });\n            return data;\n        } catch (error) {\n            if(error.response){\n                return resetpasswordFail(error.response.data.message);\n            }else{\n                return resetpasswordFail(\"Something went wrong!\");\n            }\n        }\n      }\n}\n\nexport const verifyemail = (email,token) => {\n    return async dispatch => {\n        function verifyFail(message) {\n            dispatch({ \n                type: actionTypes.VERIFY_FAIL,\n                message:message,\n                loading:false \n            });\n            return {success:false,error:message}\n        }\n        function verifySuccess(message) {\n            dispatch({ \n                type: actionTypes.VERIFY_SUCCESS,\n                message: message,\n                loading:false\n            })\n            return {success:true,message:message};\n        }\n        try {\n            dispatch({ \n                type: actionTypes.VERIFY_START \n            });\n            let authservice = new AuthService();\n            const data = await authservice.verify(email,token).then((res)=>{\n                return verifySuccess(res.data.message);\n            });\n            return data;\n        } catch (error) {\n            if(error.response){\n                return verifyFail(error.response.data.message);\n            }else{\n                return verifyFail(\"Something went wrong!\");\n            }\n            \n        }\n      }\n}\n\nexport const signup = (name,email,password) => {\n    return async dispatch => {\n        function signupFail(message) {\n            dispatch({ \n                type: actionTypes.SIGNUP_FAIL,\n                message:message,\n                loading:false \n            });\n            return {success:false,error:message}\n        }\n\n        function signupSuccess(message) {\n            dispatch({ \n                type: actionTypes.SIGNUP_SUCCESS,\n                message: message,\n                loading:false\n            })\n            return {success:true,message:message};\n        }\n\n        try{\n            dispatch({ \n                type: actionTypes.SIGNUP_START \n            });\n            let authservice = new AuthService();\n            const data = await authservice.signup(name,email,password).then((res)=>{\n                return signupSuccess(res.data.message);\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return signupFail(error.response.data.data && error.response.data.data.length>0 ? error.response.data.data[0].msg:error.response.data.message);\n            }else{\n                return signupFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const updateprofile = (name) => {\n    return async dispatch => {\n        function updateProfileFail(message) {\n            dispatch({ \n                type: actionTypes.UPDATE_PROFILE_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n        function updateProfileSuccess(message) {\n            dispatch({ \n                type:actionTypes.UPDATE_PROFILE_SUCCESS,\n                message:message\n            })\n            return {success:true,message:message};\n        }\n        try{\n            dispatch({ \n                type: actionTypes.UPDATE_PROFILE_START\n            });\n            let authservice = new AuthService();\n            const data = await authservice.updateProfile(name).then((res)=>{\n                if(res.data.success){\n                    return updateProfileSuccess(res.data.message);\n                }else{\n                    return updateProfileFail(res.data.message); \n                }\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return updateProfileFail(error.response.data.data && error.response.data.data.length>0 ? error.response.data.data[0].msg:error.response.data.message);\n            }else{\n                return updateProfileFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const getProfile = () => {\n    return async dispatch => {\n        function getProfileFail(message){\n            dispatch({ \n                type: actionTypes.GET_PROFILE_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n\n        function getProfileSuccess(message, data){\n            dispatch({ \n                type: actionTypes.GET_PROFILE_SUCCESS,\n                message:message,\n                profiledata:data\n            });\n            return {success:false,error:message}\n        }\n        try{\n            dispatch({ \n                type: actionTypes.GET_PROFILE_START\n            });\n            let authservice = new AuthService();\n            const data = await authservice.getProfile().then((res)=>{\n                if(res.data.success){\n                    return getProfileSuccess(res.data.message, res.data.data);\n                }else{\n                    return getProfileFail(res.data.message); \n                }\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return getProfileFail(error.response.data.data && error.response.data.data.length>0 ? error.response.data.data[0].msg:error.response.data.message);\n            }else{\n                return getProfileFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const changepassword = (password, newpassword) => {\n    return async dispatch => {\n        function changePasswordFail(message) {\n            dispatch({ \n                type: actionTypes.CHANGE_PASSWORD_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n        function changePasswordSuccess(message) {\n            dispatch({ \n                type:actionTypes.CHANGE_PASSWORD_SUCCESS,\n                message:message\n            })\n            return {success:true,message:message};\n        }\n        try{\n            dispatch({ \n                type: actionTypes.CHANGE_PASSWORD_START\n            });\n            let authservice = new AuthService();\n            const data = await authservice.changePassword(password, newpassword).then((res)=>{\n                if(res.data.success){\n                    return changePasswordSuccess(res.data.message);\n                }else{\n                    return changePasswordFail(res.data.message); \n                }\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return changePasswordFail(error.response.data.data && error.response.data.data.length>0 ? error.response.data.data[0].msg:error.response.data.message);\n            }else{\n                return changePasswordFail(\"Something went wrong!\");\n            }\n        }\n    }\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"verifydiv\":\"VerifyEmail_verifydiv__30BOv\",\"verify\":\"VerifyEmail_verify__2OMXr\"};","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as ROUTES from '../routes/routesConstant'; \nimport {compose} from 'recompose';\n\nconst authroute = [\n     'dashboard',\n     'adddocument',\n     'editdocument',\n     'documents',\n     'cms',\n     'flipbook',\n     'photobooth'\n]\n\nconst nonauthroute = [\n    'signup',\n    'signin',\n    'verify',\n    'reset',\n    'forgetpass'\n]\n\nconst withAuthentication = Component => {\n    class WithAuthentication extends React.Component{\n\n        componentDidMount(){\n            let auth = JSON.parse(localStorage.getItem(\"authUser\"));\n            if(!auth && authroute.includes(window.location.pathname.split('/')[1])){\n                this.props.history.push(ROUTES.SIGN_IN);\n            }\n            if(auth && nonauthroute.includes(window.location.pathname.split('/')[1])){\n                this.props.history.push(ROUTES.DASHBOARD);\n            }\n            if(auth && window.location.pathname === \"/\"){\n                this.props.history.push(ROUTES.DASHBOARD);\n            }\n        }\n        render() {\n            return <Component {...this.props}/>;\n        } \n    }\n\n    return compose(\n        withRouter\n    )(WithAuthentication);\n}\n\nexport default withAuthentication;","import React,{Component} from 'react';\nimport classes from './VerifyEmail.module.scss';\nimport { connect } from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport * as actions from '../../store/actions/auth/auth.action';\nimport withAuth from '../../hoc/withAuthentication';\n\n\nclass VerifyEmail extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isValid:true\n        }\n    }\n\n    componentDidMount(){\n        let email = this.props.match.params.email;\n        let token = this.props.match.params.token;\n        this.props.verifyemail(email,token)\n    }\n\n    render(){\n      const verifywait = this.props.loading\n      const error = !this.props.loading && this.props.error && !this.props.message\n      const message = !this.props.loading && !this.props.error && this.props.message\n      const verify = <h6>Please wait verifying...<i className=\"fa fa-circle-o-notch fa-spin ml-3\"></i></h6>;\n      const errormsg = <h6>{this.props.error}</h6>\n      const successmsg = <h6>{this.props.message}</h6>\n      return(\n        <div className={classes.verifydiv}>\n            <div className={classes.verify}>\n                <div className=\"bg-white rounded box-shadow p-5 h-100 justify-content-center align-items-center\">\n                   <div className=\"text-center\">\n                       <h1 className=\"h3 mb-3 font-weight-normal\">Email Verification</h1>\n                    </div>\n                    <div className=\"text-center mt-5\">\n                       {verifywait?verify:null}\n                       {error?errormsg:null}\n                       {message?successmsg:null}\n                    </div>\n                    <div className=\"text-center mt-4\">\n                          <Link className=\"btn btn-primary\" to=\"/signin\">Login with your credentials</Link>\n                    </div>  \n                </div>\n             </div>\n            \n         </div>\n       )\n       \n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.authReducer.loading,\n        error: state.authReducer.error,\n        message:state.authReducer.message\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        verifyemail:(email,token)=>dispatch(actions.verifyemail(email,token))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withAuth(VerifyEmail))","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: process.env.REACT_APP_API_ENDPOINT,\n    responseType: \"json\"\n});"],"sourceRoot":""}
{"version":3,"sources":["store/services/DocumentService.js","store/actions/document/document.action.js","hoc/withAuthentication.js","store/services/Api.js","pages/Dashboard/EditDocument/EditDocument.js"],"names":["DocumentService","updateProfile","email","name","auth","JSON","parse","localStorage","getItem","headers","token","params","userid","API","post","editDocument","documentid","documentname","documenttype","document","theme","data","FormData","append","put","addDocument","forEach","file","getDocument","console","log","get","getDocumentById","deleteDocument","delete","updateDocImage","docimage","updateBackground","color","adddocument","title","type","dispatch","addDocumentFail","addDocumentSuccess","a","message","actionTypes","success","error","documentservice","then","res","response","getdocument","getDocumentFail","getDocumentSuccess","documents","documentId","getDocumentByIdFail","getDocumentByIdSuccess","documentdetail","deleteflipbook","deleteDocumentFail","deleteDocumentSuccess","editdocument","editDocumentFail","editDocumentSuccess","updatedocimage","updatedocImageFail","updatedocImageSuccess","backgroundColor","updateBackgroundFail","updateBackgroundSuccess","setBackImage","backimage","authroute","nonauthroute","withAuthentication","Component","WithAuthentication","includes","window","location","pathname","split","this","props","history","push","ROUTES","React","compose","withRouter","axios","create","baseURL","process","responseType","registerPlugin","FilePondPluginImagePreview","FilePondPluginImageExifOrientation","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","EditDocument","getdocumentbyid","setState","originalType","description","errors","self","isError","validateField","isValid","match","state","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","setTimeout","inputChangeHandler","event","image","target","value","length","files","isMessage","isShow","className","htmlFor","onChange","id","placeholder","class","checked","for","acceptedFileTypes","maxFileSize","onupdatefiles","fileItems","map","fileItem","onreorderfiles","allowMultiple","allowReorder","maxFiles","labelIdle","onClick","loading","style","fontSize","connect","documentReducer","actions","withAuth"],"mappings":"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","file":"static/js/29.daa4d5e1.chunk.js","sourcesContent":["import API from \"./Api\";\n\nclass DocumentService {\n     updateProfile = (email,name) => {\n         let auth = JSON.parse(localStorage.getItem('authUser'));\n         const headers = {\n            'Authorization': auth.token\n         }\n         let params = {\n             userid:auth.userid,\n             name:name\n         }\n         return API.post(\"/updateprofile\",params,{headers: headers})   \n     }\n\n     editDocument = (documentid, documentname, documenttype, document, theme) => {\n        let auth = JSON.parse(localStorage.getItem('authUser'))\n        const headers = {\n            'Authorization': auth.token\n        }\n        const data = new FormData();\n        data.append('documentname',documentname);\n        data.append('documenttype',documenttype);\n        data.append('document', document);\n        data.append('theme', theme);\n        return API.put(`/document/${documentid}`,data,{headers: headers})\n     }\n\n     addDocument = (documentname, documenttype, document, theme) => {\n        let auth = JSON.parse(localStorage.getItem('authUser'))\n        const headers = {\n            'Authorization': auth.token\n        }\n        const data = new FormData();\n        document.forEach(file=>{\n            data.append(\"document\", file);\n        });\n        data.append('userid',auth.userid);\n        data.append('documentname',documentname);\n        data.append('documenttype',documenttype);\n        data.append('theme', theme);\n        return API.post(\"/document\",data,{headers: headers}) \n     }\n\n     getDocument = () => {\n         console.log(\"Documents service\");\n        let auth = JSON.parse(localStorage.getItem('authUser'));\n        const headers = {\n            'Authorization': auth.token\n        }\n        return API.get(`/documents`,{headers: headers})\n     }\n\n     getDocumentById = (documentid) => {\n        let auth = JSON.parse(localStorage.getItem('authUser'));\n        const headers = {\n            'Authorization': auth.token\n        }\n        return API.get(`/getdocumentbyid/${documentid}`,{headers: headers})\n     }\n\n     deleteDocument = (documentid) => {\n        let auth = JSON.parse(localStorage.getItem('authUser'));\n        const headers = {\n            'Authorization': auth.token\n        }\n        return API.delete(`/document/${documentid}`,{headers: headers})\n     }\n\n     updateDocImage = (documentid, docimage) => {\n         console.log(\"Doc\", docimage);\n        let auth = JSON.parse(localStorage.getItem('authUser'))\n        const headers = {\n            'Authorization': auth.token\n        }\n        const data = new FormData();\n        docimage.forEach(file=>{\n            data.append(\"document\", file);\n        });\n        data.append('documentid', documentid);\n        return API.post(`/updatedocimage/${documentid}`,data,{headers: headers}) \n     }\n\n     updateBackground = (documentid, color) => {\n        let auth = JSON.parse(localStorage.getItem('authUser'));\n        const headers = {\n            'Authorization': auth.token\n        }\n        let params = {\n            documentid:documentid,\n            color:color\n        }\n        return API.post(`/updatebackground/${documentid}`,params,{headers: headers})\n     }\n}\n\nexport default DocumentService;","import * as actionTypes from './document.actiontype';\nimport DocumentService from '../../services/DocumentService';\n\nexport const adddocument = (title,type,document,theme) => {\n    return async dispatch => {\n        function addDocumentFail(message) {\n            dispatch({ \n                type: actionTypes.ADD_DOCUMENT_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n        function addDocumentSuccess(message) {\n            dispatch({ \n                type:actionTypes.ADD_DOCUMENT_SUCCESS,\n                message:message\n            })\n            return {success:true,message:message};\n        }\n        try {\n            dispatch({ \n                type: actionTypes.ADD_DOCUMENT_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.addDocument(title,type,document,theme).then((res)=>{\n                if(res.data.success){\n                    return addDocumentSuccess(res.data.message);\n                }else{\n                    return addDocumentFail(res.data.message); \n                }\n            });\n            return data;\n        } catch (error) {\n            if(error.response){\n                return addDocumentFail(error.response.data.message);\n            }else{\n                return addDocumentFail(\"Something went wrong!\");\n            }\n        }\n      }\n}\n\nexport const getdocument = () => {\n    return async dispatch => {\n        function getDocumentFail(message) {\n            dispatch({ \n                type: actionTypes.GET_DOCUMENT_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n        function getDocumentSuccess(message, data) {\n            dispatch({ \n                type:actionTypes.GET_DOCUMENT_SUCCESS,\n                message:message,\n                documents:data\n            })\n            return {success:true,message:message};\n        }\n        try {\n            dispatch({ \n                type: actionTypes.GET_DOCUMENT_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.getDocument().then((res)=>{\n                if(res.data.success){\n                    return getDocumentSuccess(res.data.message, res.data.data);\n                }else{\n                    return getDocumentFail(res.data.message); \n                }\n            });\n            return data;\n        } catch (error) {\n            if(error.response){\n                return getDocumentFail(error.response.data.message);\n            }else{\n                return getDocumentFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const getDocumentById = (documentId) => {\n    return async dispatch => {\n        function getDocumentByIdFail(message){\n            dispatch({ \n                type: actionTypes.GET_DOCUMENT_BY_ID_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n        function getDocumentByIdSuccess(message, data){\n            dispatch({ \n                type:actionTypes.GET_DOCUMENT_BY_ID_SUCCESS,\n                message:message,\n                documentdetail:data\n            })\n            return {success:true,message:message};\n        }\n        try{\n            dispatch({ \n                type: actionTypes.GET_DOCUMENT_BY_ID_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.getDocumentById(documentId).then((res)=>{\n                if(res.data.success){\n                    return getDocumentByIdSuccess(res.data.message, res.data.data);\n                }else{\n                    return getDocumentByIdFail(res.data.message); \n                }\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return getDocumentByIdFail(error.response.data.message);\n            }else{\n                return getDocumentByIdFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const deleteflipbook = (documentId) => {\n    return async dispatch => {\n        function deleteDocumentFail(message){\n            dispatch({ \n                type: actionTypes.DELETE_DOCUMENT_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n\n        function deleteDocumentSuccess(message){\n            dispatch({ \n                type:actionTypes.DELETE_DOCUMENT_SUCCESS,\n                message:message\n            })\n            return {success:true,message:message};\n        }\n\n        try{\n            dispatch({ \n                type: actionTypes.DELETE_DOCUMENT_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.deleteDocument(documentId).then((res)=>{\n                if(res.data.success){\n                    return deleteDocumentSuccess(res.data.message);\n                }else{\n                    return deleteDocumentFail(res.data.message); \n                }\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return deleteDocumentFail(error.response.data.message);\n            }else{\n                return deleteDocumentFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const editdocument = (documentid,title,type,document, theme) => {\n    return async dispatch => {\n        function editDocumentFail(message) {\n            dispatch({ \n                type: actionTypes.EDIT_DOCUMENT_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n        function editDocumentSuccess(message) {\n            dispatch({ \n                type:actionTypes.EDIT_DOCUMENT_SUCCESS,\n                message:message\n            })\n            return {success:true,message:message};\n        }\n        try {\n            dispatch({ \n                type: actionTypes.EDIT_DOCUMENT_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.editDocument(documentid,title,type,document, theme).then((res)=>{\n                if(res.data.success){\n                    return editDocumentSuccess(res.data.message);\n                }else{\n                    return editDocumentFail(res.data.message); \n                }\n            });\n            return data;\n        } catch (error) {\n            if(error.response){\n                return editDocumentFail(error.response.data.message);\n            }else{\n                return editDocumentFail(\"Something went wrong!\");\n            }\n        }\n      }\n}\n\nexport const updatedocimage = (documentid, docimage) => {\n    return async dispatch => {\n        function updatedocImageFail(message){\n            dispatch({ \n                type: actionTypes.UPDATE_DOCUMENT_IMAGE_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n\n        function updatedocImageSuccess(message){\n            dispatch({ \n                type: actionTypes.UPDATE_DOCUMENT_IMAGE_SUCCESS,\n                message:message\n            });\n            return {success:true,message:message};\n        }\n\n        try{\n            dispatch({ \n                type: actionTypes.UPDATE_DOCUMENT_IMAGE_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.updateDocImage(documentid,docimage).then((res)=>{\n                if(res.data.success){\n                    return updatedocImageSuccess(res.data.message);\n                }else{\n                    return updatedocImageFail(res.data.message);\n                }\n            });\n            return data;\n        } catch(error) {\n            console.log(\"Error\", error);\n            if(error.response){\n                return updatedocImageFail(error.response.data.message);\n            }else{\n                return updatedocImageFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const updateBackground = (documentid, backgroundColor) => {\n    return async dispatch => {\n        function updateBackgroundFail(message){\n            dispatch({ \n                type: actionTypes.UPDATE_BACKGROUND_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n\n        function updateBackgroundSuccess(message){\n            dispatch({ \n                type: actionTypes.UPDATE_BACKGROUND_SUCCESS,\n                message:message\n            });\n            return {success:true,message:message};\n        }\n\n        try{\n            dispatch({ \n                type: actionTypes.UPDATE_BACKGROUND_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.updateBackground(documentid,backgroundColor).then((res)=>{\n                if(res.data.success){\n                    return updateBackgroundSuccess(res.data.message);\n                }else{\n                    return updateBackgroundFail(res.data.message);\n                }\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return updateBackgroundFail(error.response.data.message);\n            }else{\n                return updateBackgroundFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\nexport const setBackImage = (backimage) => {\n    return async dispatch => {\n        dispatch({ \n            type: actionTypes.SET_BACK_IMAGE,\n            backimage:backimage\n        });\n    }\n}\n\nexport const embedContent = (pagenum, embedcontent) => {\n    return async dispatch => {\n        function embedContentFail(message){\n            dispatch({ \n                type: actionTypes.EMBED_CONTENT_FAIL,\n                message:message\n            });\n            return {success:false,error:message}\n        }\n\n        function embedContentSuccess(message){\n            dispatch({ \n                type: actionTypes.EMBED_CONTENT_SUCCESS,\n                message:message\n            });\n            return {success:true,message:message};\n        }\n\n        try{\n            dispatch({ \n                type: actionTypes.EMBED_CONTENT_START\n            });\n            let documentservice = new DocumentService();\n            const data = await documentservice.embedContent(pagenum,embedcontent).then((res)=>{\n                if(res.data.success){\n                    return embedContentSuccess(res.data.message);\n                }else{\n                    return embedContentFail(res.data.message);\n                }\n            });\n            return data;\n        }catch(error){\n            if(error.response){\n                return embedContentFail(error.response.data.message);\n            }else{\n                return embedContentFail(\"Something went wrong!\");\n            }\n        }\n    }\n}\n\n\n\n\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as ROUTES from '../routes/routesConstant'; \nimport {compose} from 'recompose';\n\nconst authroute = [\n     'dashboard',\n     'adddocument',\n     'editdocument',\n     'documents',\n     'cms',\n     'flipbook',\n     'photobooth'\n]\n\nconst nonauthroute = [\n    'signup',\n    'signin',\n    'verify',\n    'reset',\n    'forgetpass'\n]\n\nconst withAuthentication = Component => {\n    class WithAuthentication extends React.Component{\n\n        componentDidMount(){\n            let auth = JSON.parse(localStorage.getItem(\"authUser\"));\n            if(!auth && authroute.includes(window.location.pathname.split('/')[1])){\n                this.props.history.push(ROUTES.SIGN_IN);\n            }\n            if(auth && nonauthroute.includes(window.location.pathname.split('/')[1])){\n                this.props.history.push(ROUTES.DASHBOARD);\n            }\n            if(auth && window.location.pathname === \"/\"){\n                this.props.history.push(ROUTES.DASHBOARD);\n            }\n        }\n        render() {\n            return <Component {...this.props}/>;\n        } \n    }\n\n    return compose(\n        withRouter\n    )(WithAuthentication);\n}\n\nexport default withAuthentication;","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: process.env.REACT_APP_API_ENDPOINT,\n    responseType: \"json\"\n});","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/document/document.action';\nimport withAuth from '../../../hoc/withAuthentication';\n//import RUG from 'react-upload-gallery'\n//import 'react-upload-gallery/dist/style.css'\nimport { store } from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css'\nimport 'animate.css'\nimport { FilePond, registerPlugin} from 'react-filepond'\nimport 'filepond/dist/filepond.min.css'\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\nimport 'filepond/dist/filepond.min.css'\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation'\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview'\nimport FilePondPluginFileValidateSize from 'filepond-plugin-file-validate-size';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css'\n\nregisterPlugin(FilePondPluginImagePreview, FilePondPluginImageExifOrientation, FilePondPluginFileValidateType, FilePondPluginFileValidateSize)\n\n\nclass EditDocument extends Component{\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            isMessage:false,\n            isShow:false,\n            originalType:\"\",\n            isValid:true,\n            theme:\"white\",\n            errors:{\n                title:\"Document Title is required\",\n                description:\"Type is required\"\n            }\n        }\n    }\n\n    getDocumentById = async(documentid) =>{\n        await this.props.getdocumentbyid(documentid);\n        this.setState({\n            title:this.props.documentdetail.title,\n            originalType: this.props.documentdetail.type,\n            description:this.props.documentdetail.type,\n            theme:this.props.documentdetail.theme?this.props.documentdetail.theme:\"white\",\n            errors:{\n                  title:\"\",\n                  description:\"\"\n            }\n        })\n    }\n\n    componentDidMount(){\n        this.getDocumentById(this.props.match.params.documentid);\n    }\n\n    editDocument = async() =>{\n        const self = this;\n        const isError = this.validateField();\n        isError?this.setState({isValid:false}):this.setState({isValid:true})\n        console.log(\"Error\", isError);\n        if(!isError){\n            const editdocument = await this.props.editdocument(this.props.match.params.documentid, this.state.title,this.state.description,this.state.document, this.state.theme);\n            if(editdocument.success){\n                store.addNotification({\n                    title: 'Success',\n                    message: editdocument.message,\n                    type: 'default',\n                    insert: 'top',\n                    container: 'top-right',\n                    animationIn: ['animated', 'fadeIn'],\n                    animationOut: ['animated', 'fadeOut'],\n                    dismiss: {\n                      duration: 2000,\n                      onScreen: true,\n                    },\n                }) \n                setTimeout(()=>{\n                    self.props.history.push(\"/dashboard\")\n                }, 1000)  \n            }\n            if(!editdocument.success){\n                store.addNotification({\n                    title: 'Error',\n                    message: editdocument.error,\n                    type: 'danger',\n                    insert: 'top',\n                    container: 'top-right',\n                    animationIn: ['animated', 'fadeIn'],\n                    animationOut: ['animated', 'fadeOut'],\n                    dismiss: {\n                      duration: 2000,\n                      onScreen: true,\n                    },\n                })\n            }\n        }\n    }\n\n    validateField = () => {\n        let isError = false\n        if(this.state.errors){\n            for(let error in this.state.errors){\n                if(this.state.errors[error]){\n                    isError = true\n                }\n            }\n        }else{\n            isError = true\n        }\n        return isError;\n      }\n\n    inputChangeHandler = (event) => {\n        let errors = {\n            title:this.state.errors.title,\n            description:this.state.errors.description,\n            image:this.state.errors.image \n        };\n        switch(event.target.name){\n            case 'title':\n                errors.title = event.target.value===\"\" || event.target.value.length<5?\"Title must be of atleast 5 character\":\"\"\n                break;\n            case 'description':\n                errors.description = event.target.value===\"\"?\"Please enter document type\":\"\"\n                if(errors.description !== this.state.originalType){\n                    errors.image = \"Upload required files!\"\n                }else{\n                    errors.image = \"\"\n                }\n                break;\n            default:\n                break;\n        }\n        event.target.name===\"document\"?this.setState({\n            errors:errors,\n            [event.target.name]: [event.target.files[0]]\n        }):this.setState({\n            errors:errors,\n            [event.target.name]: event.target.value\n        })\n    }\n\n     render(){\n        //let self = this;\n        return(\n            <div className={`container mb-5 bg-white rounded p-5`}>\n                   <div>\n                        <div className=\"form-group\">\n                            <label className=\"col-sm-5 control-label\" htmlFor=\"documenttitle\">Document Title</label>\n                            <div className=\"col-sm-12\">\n                                <input value={this.state.title} onChange={this.inputChangeHandler} name=\"title\" type=\"text\" className=\"form-control\" id=\"documenttitle\" placeholder=\"Document Title\"/>\n                                {!this.state.isValid?(<p className=\"invalid-feedback\">{this.state.errors && this.state.errors.title?this.state.errors.title:\"\"}</p>):null}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"col-sm-5 control-label\" htmlFor=\"description\">Background theme</label>\n                            <div className=\"col-sm-12\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" onChange={this.inputChangeHandler} type=\"radio\" name=\"theme\" id=\"exampleRadios1\" value=\"white\" checked={this.state.theme === \"white\"}/>\n                                    <label class=\"form-check-label\" for=\"exampleRadios1\">\n                                        White\n                                    </label>\n                                </div>\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" onChange={this.inputChangeHandler} type=\"radio\" name=\"theme\" id=\"exampleRadios2\" value=\"black\" checked={this.state.theme === \"black\"}/>\n                                    <label class=\"form-check-label\" for=\"exampleRadios2\">\n                                        Black\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"col-sm-5 control-label\" htmlFor=\"description\">Document Type</label>\n                            <div className=\"col-sm-12\">\n                                <select value={this.state.description} onChange={this.inputChangeHandler} name=\"description\" id=\"description\" className=\"form-control\">\n                                    <option value=\"\">Select type</option>\n                                    <option value=\"pdf\">Pdf</option>\n                                    <option value=\"image\">Image</option>\n                                    <option value=\"video\">Video</option>\n                                    <option value=\"custom\">Custom</option>\n                                </select>\n                                {!this.state.isValid?(<p className=\"invalid-feedback\">{this.state.errors && this.state.errors.description?this.state.errors.description:\"\"}</p>):null}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"col-sm-5 control-label\" htmlFor=\"image\">Upload document</label>\n                            <div className=\"col-sm-12\">\n                                {this.state.description === \"image\"?(<FilePond\n                                    files={this.state.document}\n                                    acceptedFileTypes={['image/*']}\n                                    maxFileSize=\"2MB\"\n                                    onupdatefiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }}\n                                     onreorderfiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }\n                                    }\n                                    allowMultiple={true}\n                                    allowReorder={true}\n                                    maxFiles={100}\n                                    name=\"files\"\n                                    labelIdle='Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>'\n                                />):null}\n\n                                {this.state.description === \"video\"?(<FilePond\n                                    files={this.state.document}\n                                    acceptedFileTypes={['video/*']}\n                                    maxFileSize=\"2MB\"\n                                    onupdatefiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }}\n                                     onreorderfiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }\n                                    }\n                                    allowMultiple={true}\n                                    allowReorder={true}\n                                    maxFiles={10}\n                                    name=\"files\"\n                                    labelIdle='Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>'\n                                />):null}\n\n                                  {this.state.description === \"pdf\"?(<FilePond\n                                    files={this.state.document}\n                                    maxFileSize=\"2MB\"\n                                    acceptedFileTypes= 'application/pdf'\n                                    onupdatefiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }}\n                                     onreorderfiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }\n                                    }\n                                    allowMultiple={true}\n                                    allowReorder={true}\n                                    maxFiles={1}\n                                    name=\"files\"\n                                    labelIdle='Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>'\n                                />):null}\n\n                                  {this.state.description === \"custom\"?(<FilePond\n                                    files={this.state.document}\n                                    maxFileSize=\"2MB\"\n                                    acceptedFileTypes= {['video/*','image/*','application/pdf']}\n                                    onupdatefiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }}\n                                     onreorderfiles={fileItems => {\n                                        if(fileItems.length>0){\n                                            let errors   = {...this.state.errors};\n                                            errors.image = \"\";\n                                            this.setState({\n                                                errors:errors,\n                                                document: fileItems.map(fileItem => fileItem.file)\n                                            });\n                                        }\n                                     }\n                                    }\n                                    allowMultiple={true}\n                                    allowReorder={true}\n                                    maxFiles={1}\n                                    name=\"files\"\n                                    labelIdle='Drag & Drop your images, pdf, video or <span class=\"filepond--label-action\">Browse</span>'\n                                />):null}\n                                {!this.state.isValid?(<p className=\"invalid-feedback\">{this.state.errors && this.state.errors.image?this.state.errors.image:\"\"}</p>):null}\n                            </div>\n                        </div>\n                        <div className=\"form-group mt-5\">\n                            <div className=\"col-sm-12\">\n                                <button onClick={this.editDocument} type=\"button\" className=\"btn btn-primary\">Update FlipBook {this.props.loading?(<i className=\"fa fa-circle-o-notch fa-spin\" style={{fontSize:\"24px\"}}></i>):null}</button>\n                            </div> \n                        </div>\n                   </div>\n            </div>  \n        )\n     }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.documentReducer.loading,\n        error: state.documentReducer.error,\n        message:state.documentReducer.message,\n        documentdetail: state.documentReducer.documentdetail\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        editdocument:(documentid,title,type,document, theme)=>dispatch(actions.editdocument(documentid,title,type,document, theme)),\n        getdocumentbyid:(documentid)=>dispatch(actions.getDocumentById(documentid))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withAuth(EditDocument))\n\n\n"],"sourceRoot":""}